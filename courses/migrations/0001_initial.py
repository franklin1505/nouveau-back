# Generated by Django 4.2.16 on 2024-12-24 00:25

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('configurations', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdditionalData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.CharField(help_text='Item name or identifier.', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of the additional data.', null=True)),
                ('unit_price_excl_tax', models.DecimalField(decimal_places=2, help_text='Unit price excluding taxes.', max_digits=10)),
                ('quantity', models.PositiveIntegerField(default=1, help_text='Quantity of the item.')),
                ('vat', models.DecimalField(decimal_places=2, default=0.1, help_text='Value-added tax (VAT) as a decimal (e.g., 0.1 for 10%).', max_digits=4)),
                ('total_ttc', models.DecimalField(decimal_places=2, help_text='Total price including taxes.', max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date when the additional data was added.')),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_driver_paid', models.BooleanField(default=False, help_text='Indicates if the driver has been paid.')),
                ('is_partner_paid', models.BooleanField(default=False, help_text='Indicates if the partner has been paid.')),
                ('driver_sale_price', models.FloatField(blank=True, help_text='Sale price for the driver', null=True)),
                ('partner_sale_price', models.FloatField(blank=True, help_text='Sale price for the partner.', null=True)),
                ('compensation', models.FloatField(blank=True, help_text='Compensation amount.', null=True)),
                ('commission', models.IntegerField(blank=True, help_text='Commission amount.', null=True)),
                ('booking_number', models.CharField(help_text='Unique booking number.', max_length=255, null=True, unique=True)),
                ('cancellation_status', models.CharField(choices=[('not_cancelled', 'Not Cancelled'), ('cancellation_requested', 'Cancellation Requested'), ('cancelled', 'Cancelled')], default='not_cancelled', help_text='Cancellation status of the booking.', max_length=25)),
                ('billing_status', models.CharField(choices=[('not_invoiced', 'Not Invoiced'), ('invoice_requested', 'Invoice Requested'), ('invoiced', 'Invoiced')], default='not_invoiced', help_text='Billing status of the booking.', max_length=25)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date when the booking was created.')),
            ],
        ),
        migrations.CreateModel(
            name='BookingLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(help_text='Description of the action performed.', max_length=255)),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Date and time when the action was performed.')),
            ],
            options={
                'verbose_name': 'Booking Log',
                'verbose_name_plural': 'Booking Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Estimate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance_travelled', models.FloatField(help_text='Distance travelled in kilometers.')),
                ('duration_travelled', models.CharField(help_text='Duration of the travel.', max_length=255)),
                ('pickup_date', models.DateTimeField(help_text='Date and time for pickup.')),
                ('departure_location', models.CharField(help_text='Departure location.', max_length=255)),
                ('destination_location', models.CharField(help_text='Destination location.', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the estimate was created.')),
                ('message', models.TextField(blank=True, help_text='Additional message for the estimate.', null=True)),
                ('total_booking_cost', models.FloatField(blank=True, help_text='Total cost of the booking.', null=True)),
                ('total_attributes_cost', models.FloatField(blank=True, help_text='Total cost of the attributes.', null=True)),
                ('number_of_luggages', models.CharField(blank=True, help_text='Number of luggages.', max_length=100, null=True)),
                ('number_of_passengers', models.PositiveIntegerField(blank=True, help_text='Number of passengers.', null=True)),
                ('case_number', models.CharField(blank=True, help_text='booking case number.', max_length=100, null=True)),
                ('flight_number', models.CharField(blank=True, help_text='Flight number associated with the estimate.', max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EstimateAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(help_text='Quantity of the attribute used in the estimation.')),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_comment', models.TextField(blank=True, help_text='Comment provided by the client.', null=True)),
                ('driver_comment', models.TextField(blank=True, help_text='Comment provided by the driver.', null=True)),
                ('driver_rating', models.IntegerField(default=0, help_text='Rating for the driver, from 0 to 100.')),
                ('loyalty_points', models.IntegerField(default=10, help_text='Default loyalty points awarded.')),
                ('client_comment_saved', models.BooleanField(default=False, help_text="Indicates if the client's comment has been saved.")),
                ('driver_comment_saved', models.BooleanField(default=False, help_text="Indicates if the driver's comment has been saved.")),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the feedback was created.')),
            ],
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_number', models.CharField(editable=False, help_text='Unique invoice number.', max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date when the invoice was created.')),
                ('issued_date', models.DateTimeField(auto_now_add=True, help_text='Date when the invoice was issued.')),
                ('payment_date', models.DateTimeField(blank=True, help_text='Date when the invoice was paid.', null=True)),
                ('total_excluding_tax', models.FloatField(help_text='Total amount excluding taxes.')),
                ('total_tax', models.FloatField(help_text='Total amount of taxes.')),
                ('total_including_tax', models.FloatField(help_text='Total amount including taxes.')),
                ('amount_paid', models.FloatField(default=0.0, help_text='Total amount paid towards the invoice.')),
                ('remaining_balance', models.FloatField(default=0.0, help_text='Remaining balance to be paid for the invoice.')),
                ('due_date', models.DateTimeField(blank=True, help_text='Due date for the invoice payment.', null=True)),
                ('is_cancelled', models.BooleanField(default=False, help_text='Indicates whether the invoice is cancelled.')),
                ('invoice_type', models.CharField(choices=[('unpaid', 'Unpaid'), ('paid', 'Paid'), ('partially_paid', 'Partially Paid'), ('cancelled', 'Cancelled')], default='unpaid', help_text='Status of the invoice.', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Passenger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the passenger.', max_length=255)),
                ('phone_number', models.CharField(help_text='Phone number of the passenger.', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date when the passenger was added.')),
            ],
        ),
        migrations.CreateModel(
            name='Quote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quote_number', models.CharField(help_text='Unique number for the quote.', max_length=255, null=True, unique=True)),
                ('total_cost', models.FloatField(blank=True, help_text='Total cost of the quote.', null=True)),
                ('is_validated', models.BooleanField(default=False, help_text='Indicates whether the quote is validated.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date when the quote was created.')),
            ],
        ),
        migrations.CreateModel(
            name='TransportCost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_cost', models.FloatField(help_text='Base cost before tax.')),
                ('vat', models.FloatField(help_text='Value-added tax percentage.')),
                ('total_cost', models.FloatField(help_text='Total cost including VAT.')),
                ('vehicle', models.ForeignKey(blank=True, help_text='Vehicle associated with this transport cost.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transport_costs', to='configurations.vehicle')),
            ],
        ),
    ]
